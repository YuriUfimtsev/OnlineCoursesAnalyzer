@page "/"
@inject HttpClient Http
@using OnlineCoursesAnalyzer.Data;
@using OnlineCoursesAnalyzer.DataHandling;
@using OnlineCoursesAnalyzer.Components;

<Menu MenuDisplayClass="@displayClass" ChangingDisplayMethod="@ChangeView" />
<Modal Header="@operationStatus" HeaderStyle="@validationClass" Text="@externalMessage" @ref="modal"></Modal>

<PageTitle>OnlineCoursesAnalyzer</PageTitle>

<style>
    .disabled {
        display: none;
    }

    .show {
        display: block;
    }

    body {
        padding-top: @bodyPaddingTop;
        padding-bottom: 20px;
    }
</style>

<div class="container">
    <div class="row @displayClass">
        <div class="col-6 d-grid">
            <h5>Поле для данных об успеваемости</h5>
        </div>
        <div class="col-6 d-grid">
            <h5>Поле для данных о результатах прокторинга</h5>
        </div>
    </div>

    <div class="row g-2 @displayClass">
        <div class="col-6 d-grid">
            <div class="upload-container @firstContainerHoverClass">
                <img src="uploadContainerImg.svg">
                    <InputFile OnChange="@LoadEducationalAchievementDataFile" @ondragover="OnFirstContainerDragover"
                    @ondragleave="OnFirstContainerDragleave" />
                <p>Нажмите, чтобы добавить файл <br />или переместите его сюда.</p>
            </div>
            <h6>Добавлен: @educationalAchievementDataFileName</h6>
        </div>
        <div class="col-6 d-grid">
            <div class="upload-container @secondContainerHoverClass">
                <img src="uploadContainerImg.svg">
                <InputFile OnChange="@LoadProctoringStatusDataFile" @ondragover="OnSecondContainerDragover"
                    @ondragleave="OnSecondContainerDragleave" />
                <p>Нажмите, чтобы добавить файл <br />или переместите его сюда.</p>
            </div>
            <h6>Добавлен: @proctoringStatusDataFileName</h6>
        </div>
    </div>


    <div class="row g-3 @displayClass">
        <div class="col-3 d-grid">
            <button type="button" class="btn btn-outline-dark btn-block" @onclick="GetResult">
            Получить результат
            </button>
        </div>
        <div class="col-9">
            <div class="alert @validationClass" role="alert">
                <span @onclick="() => modal!.Open()">@message</span>
            </div>
        </div>
    </div>

    <div class="row @displayClassInvertion">
        <button class="btn-sm btn-outline-dark btn-block" @onclick="ChangeView">
            Изменить вид
        </button>
    </div>

    <div class="row">
        <TableTemplate Items="this.students" TItem="Student">
            <TableHeader>
                <th>Почта</th>
                <th>Фамилия</th>
                <th>Имя</th>
                <th>Отчество</th>
                <th>Оценка</th>
                <th>Статус прокторинга</th>
            </TableHeader>
            <RowTemplate>
                <td>@context.Email</td>
                <td>@context.SecondName</td>
                <td>@context.FirstName</td>
                <td>@context.LastName</td>
                <td>@context.Grade</td>
                <td>@context.ProctoringStatus</td>
            </RowTemplate>
        </TableTemplate>
    </div>
</div>

@code {
    private Modal? modal;
    private DataHandler dataHandler;
    private List<(Student, bool)>? students;

    private string displayClass;
    private string displayClassInvertion;
    private string bodyPaddingTop;

    private string message;
    private string externalMessage;
    private string operationStatus;
    private string validationClass;
    private string firstContainerHoverClass;
    private string secondContainerHoverClass;
    private string educationalAchievementDataFileName;
    private string proctoringStatusDataFileName;

    public Index()
    {
        this.validationClass = string.Empty;
        this.dataHandler = new DataHandler();
        this.firstContainerHoverClass = string.Empty;
        this.secondContainerHoverClass = string.Empty;
        this.message = string.Empty;
        this.operationStatus = string.Empty;
        this.validationClass = "standart";
        this.proctoringStatusDataFileName = string.Empty; 
        this.educationalAchievementDataFileName = string.Empty;
        this.externalMessage = string.Empty;
        this.displayClass = string.Empty;
        this.displayClassInvertion = "disabled";
        this.bodyPaddingTop = "40px";
    }

    /// <summary>
    /// Supported file types.
    /// </summary>
    private enum FileType
    {
        EducationalAchievementData,
        ProctoringStatusData,
    }

    private void ChangeView()
    {
        this.displayClass = this.displayClass == "disabled" ? "" : "disabled";
        this.displayClassInvertion = this.displayClass == "disabled" ? "" : "disabled";
        this.bodyPaddingTop = this.displayClass == "disabled" ? "5px" : "40px";
    }

    private void OnFirstContainerDragover() => this.firstContainerHoverClass = "hover";

    private void OnSecondContainerDragover() => this.secondContainerHoverClass = "hover";

    private void OnFirstContainerDragleave() => this.firstContainerHoverClass = string.Empty;

    private void OnSecondContainerDragleave() => this.secondContainerHoverClass = string.Empty;

    private void Successfully(string message, string externalMessage)
    {
        this.validationClass = "alert-success";
        this.operationStatus = "Выполнено";
        this.message = message;
        this.externalMessage = externalMessage;
    }

    private void WithWarning(string message, string externalMessage)
    {
        this.validationClass = "alert-warning";
        this.operationStatus = "Выполнено";
        this.message = message;
        this.externalMessage = externalMessage;
    }

    private void Unsuccessfully(string message, string externalMessage)
    {
        this.validationClass = "alert-danger";
        this.operationStatus = "Не выполнено";
        this.message = message;
        this.externalMessage = externalMessage;
    }

    private void Standart(string message, string externalMessage)
    {
        this.validationClass = "standart";
        this.operationStatus = "В ожидании";
        this.message = message;
        this.externalMessage = externalMessage;
    }

    private void ShowAddedFileName(string fileName, FileType fileType)
    {
        switch (fileType)
        {
            case FileType.EducationalAchievementData: this.educationalAchievementDataFileName = fileName;
                break;
            case FileType.ProctoringStatusData: this.proctoringStatusDataFileName = fileName;
                break;
        }
    }

    private async Task GetResult()
    {
        this.Standart(Messages.InProcess, Messages.InProcess);
        await Task.Delay(1);
        this.OnFirstContainerDragleave();
        this.OnSecondContainerDragleave();
        try
        {
            var (studentsData, studentsWithoutProctoringStatus)
                = this.dataHandler.GetResultWithExplicitProctoringStatus();
            this.students = studentsData;
            if (studentsWithoutProctoringStatus.Count > 0)
            {
                this.WithWarning(
                    Messages.GenerateFilesProcessingWarningMessage(studentsWithoutProctoringStatus.Count),
                    Messages.GenerateFilesProcessingWarningMessageWithStudentEmails(studentsWithoutProctoringStatus));
            }
            else
            {
                this.Successfully(Messages.ProcessingCompletedSuccessfully, Messages.ProcessingCompletedSuccessfully);
            }
        }
        catch (InvalidInputDataException invalidInputDataException)
        {
            this.Unsuccessfully(invalidInputDataException.Message, invalidInputDataException.ExternalMessage);
        }
    }

    private async Task LoadEducationalAchievementDataFile(InputFileChangeEventArgs eventArgs)
        => await LoadDataFile(eventArgs, FileType.EducationalAchievementData);

    private async Task LoadProctoringStatusDataFile(InputFileChangeEventArgs eventArgs)
        => await LoadDataFile(eventArgs, FileType.ProctoringStatusData);

    private async Task LoadDataFile(InputFileChangeEventArgs eventArgs, FileType fileType)
    {
        switch (fileType)
        {
            case FileType.EducationalAchievementData:
                OnFirstContainerDragleave();
                break;
            case FileType.ProctoringStatusData:
                OnSecondContainerDragleave();
                break;
        }

        var file = eventArgs.File;
        using var memoryStream = new MemoryStream();
        this.Standart(Messages.GenerateFileInProcessUploadMessage(file.Name),
            Messages.GenerateFileInProcessUploadMessage(file.Name));
        await file.OpenReadStream(fileType == FileType.EducationalAchievementData
            ? EducationalAchievementFile.MaxAllowedSizeInBytes
            : ProctoringStatusFile.MaxAllowedSizeInBytes)
                .CopyToAsync(memoryStream);
        try
        {
            var errorRows = fileType == FileType.EducationalAchievementData
                ? this.dataHandler.AddEducationalAchievementData(memoryStream)
                    : this.dataHandler.AddProctoringStatusData(memoryStream);
            if (errorRows.Count > 0)
            {
                this.WithWarning(Messages.GenerateFileUploadWarningMessage(errorRows.Count),
                    Messages.GenerateFileUploadWarningMessageWithInvalidRows(errorRows));
            }
            else
            {
                this.Successfully(Messages.GenerateFileSuccessfullyUploadMessage(file.Name),
                    Messages.GenerateFileSuccessfullyUploadMessage(file.Name));
            }

            this.ShowAddedFileName(file.Name, fileType);
        }
        catch (InvalidInputDataException invalidInputDataException)
        {
            this.Unsuccessfully(invalidInputDataException.Message, invalidInputDataException.ExternalMessage);
        }
    }
}